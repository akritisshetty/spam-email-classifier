# -*- coding: utf-8 -*-
"""SpamEmailClassifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1azzMxELDQwafHBd6Pac7z3YzkN_uFgNe
"""

# Installing required libraries
!pip install scikit-learn pandas matplotlib

# Import libraries
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import seaborn as sns

# Downloading dataset
!wget https://archive.ics.uci.edu/ml/machine-learning-databases/00228/smsspamcollection.zip
!unzip smsspamcollection.zip

# Loading into pandas
data = pd.read_csv("SMSSpamCollection", sep='\t', names=['label', 'message'])
data.head()

# Splitting into X (features) and y (labels)
X = data['message']
y = data['label']

# Train-test split (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Converting text into TF-IDF vectors
vectorizer = TfidfVectorizer(stop_words='english')
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

# Training Models
# 1. Naive Bayes
nb = MultinomialNB()
nb.fit(X_train_tfidf, y_train)
y_pred_nb = nb.predict(X_test_tfidf)

# 2. Logistic Regression
lr = LogisticRegression(max_iter=1000)
lr.fit(X_train_tfidf, y_train)
y_pred_lr = lr.predict(X_test_tfidf)

# Evaluating both the models
# Naive Bayes Evaluation
print("Naive Bayes Accuracy:", accuracy_score(y_test, y_pred_nb))
print(classification_report(y_test, y_pred_nb))

# Logistic Regression Evaluation
print("Logistic Regression Accuracy:", accuracy_score(y_test, y_pred_lr))
print(classification_report(y_test, y_pred_lr))

# Confusion Matrix for Logistic Regression
cm = confusion_matrix(y_test, y_pred_lr)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Ham','Spam'], yticklabels=['Ham','Spam'])
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

# Making predictions on new emails:
def predict_spam(text, model):
    text_tfidf = vectorizer.transform([text])
    return model.predict(text_tfidf)[0]

print(predict_spam("Hey Akriti! Are we meeting at 6?", lr))
print(predict_spam("Congratulations! ðŸŽ‰ Youâ€™ve won a FREE iPhone 14! Click the link below to claim your prize: http://scammy-link.com. Offer valid only for today.", lr))